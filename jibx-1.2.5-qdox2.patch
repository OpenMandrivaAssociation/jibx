--- ./build/src/org/jibx/custom/classes/ClassItemSourceWrapper.java.orig	2014-12-27 00:30:47.415002440 +0000
+++ ./build/src/org/jibx/custom/classes/ClassItemSourceWrapper.java	2014-12-27 00:57:54.281882584 +0000
@@ -31,8 +31,8 @@
 import com.thoughtworks.qdox.model.JavaField;
 import com.thoughtworks.qdox.model.JavaMethod;
 import com.thoughtworks.qdox.model.JavaParameter;
-import com.thoughtworks.qdox.model.Member;
-import com.thoughtworks.qdox.model.Type;
+import com.thoughtworks.qdox.model.JavaMember;
+import com.thoughtworks.qdox.model.JavaType;
 
 /**
  * Wrapper for class field or method item with added source information. This wraps the basic class handling
@@ -44,7 +44,7 @@
 {
     private boolean m_checkedSource;
     
-    private Member m_itemSource;
+    private JavaMember m_itemSource;
     
     /**
      * Constructor
@@ -64,12 +64,12 @@
      */
     private boolean matchSignature(JavaMethod method) {
         boolean match = true;
-        JavaParameter[] parms = method.getParameters();
+        JavaParameter[] parms = method.getParameters().toArray(new JavaParameter[method.getParameters().size()]);
         if (parms.length == getArgumentCount()) {
             for (int j = 0; j < parms.length; j++) {
-                Type ptype = parms[j].getType();
+                JavaType ptype = parms[j].getType();
                 String type = ptype.getValue();
-                int ndim = ptype.getDimensions();
+                int ndim = parms[j].getJavaClass().getDimensions();
                 while (ndim-- > 0) {
                     type += "[]";
                 }
@@ -90,7 +90,7 @@
      * 
      * @return source information
      */
-    private Member getItemSource() {
+    private JavaMember getItemSource() {
         if (!m_checkedSource) {
             m_checkedSource = true;
             IClass clas = getContainingClass();
@@ -101,7 +101,7 @@
                 if (jc != null) {
                     if (isMethod()) {
                         String mname = getName();
-                        JavaMethod[] methods = jc.getMethods();
+                        JavaMethod[] methods = jc.getMethods().toArray(new JavaMethod[jc.getMethods().size()]);
                         for (int i = 0; i < methods.length; i++) {
                             JavaMethod method = methods[i];
                             if (mname.equals(method.getName())) {
@@ -142,7 +142,7 @@
      * @see org.jibx.binding.model.IClassItem#getJavaDoc()
      */
     public String getJavaDoc() {
-        Member src = getItemSource();
+        JavaMember src = getItemSource();
         if (src == null) {
             return null;
         } else if (isMethod()) {
@@ -181,11 +181,11 @@
         if (isMethod()) {
             JavaMethod jm = (JavaMethod)getItemSource();
             if (jm != null) {
-                String name = jm.getParameters()[index].getName();
-                DocletTag[] tags = jm.getTagsByName("param");
+                String name = jm.getParameters().get(index).getName();
+                DocletTag[] tags = jm.getTagsByName("param").toArray(new DocletTag[jm.getTagsByName("param").size()]);
                 for (int i = 0; i < tags.length; i++) {
                     DocletTag tag = tags[i];
-                    String[] parms = tag.getParameters();
+                    String[] parms = tag.getParameters().toArray(new String[tag.getParameters().size()]);
                     if (parms != null && parms.length > 0 && name.equals(parms[0])) {
                         String text = tag.getValue().trim();
                         if (text.startsWith(name)) {
@@ -210,7 +210,7 @@
         JavaMethod jm = (JavaMethod)getItemSource();
         String name;
         if (jm != null) {
-            JavaParameter[] parameters = jm.getParameters();
+            JavaParameter[] parameters = jm.getParameters().toArray(new JavaParameter[jm.getParameters().size()]);
             name = parameters[index].getName();
         } else {
             name = super.getParameterName(index);
@@ -228,10 +228,10 @@
             JavaMethod jm = (JavaMethod)getItemSource();
             if (jm != null) {
                 String name = getExceptions()[index];
-                DocletTag[] tags = jm.getTagsByName("throws");
+                DocletTag[] tags = jm.getTagsByName("throws").toArray(new DocletTag[jm.getTagsByName("throws").size()]);
                 for (int i = 0; i < tags.length; i++) {
                     DocletTag tag = tags[i];
-                    String[] parms = tag.getParameters();
+                    String[] parms = tag.getParameters().toArray(new String[tag.getParameters().size()]);
                     if (parms != null && parms.length > 0 && name.equals(parms[0])) {
                         return docText(tag.getValue());
                     }
@@ -242,4 +242,4 @@
             throw new IllegalStateException("Internal error: not a method");
         }
     }
-}
\ No newline at end of file
+}
